// import OpenAI from 'openai';
const qrcode = require('qrcode-terminal');
const { Client } = require('whatsapp-web.js');
const client = new Client();
const axios = require('axios');

const AI_CONFIG = {
    API_KEY: "sk-0ae21ea044344d4dbd6c4364bb903888", // Substitua pela chave que j√° testou
    API_URL: "https://api.openai.com/v1/chat/completions", // Ou URL da API que voc√™ usou
    MODEL: "deepseek-chat",
    MAX_TOKENS: 150 // Limita o tamanho da resposta para economizar cr√©ditos
};


// Servi√ßo de leitura do QR Code
client.on('qr', qr => {
    qrcode.generate(qr, { small: true });
});

client.on('ready', () => {
    console.log('Tudo certo! WhatsApp conectado.');
});

client.initialize();

const delay = ms => new Promise(res => setTimeout(res, ms));

// Objeto com estados da conversa (para controlar fluxos)
const userStates = {};

// Fun√ß√µes de resposta modularizadas

// Fun√ß√£o para gerar resposta da IA
async function generateAIResponse(userMessage, context = "") {

    try {
        const prompt = `Contexto: ${context}\n\nUsu√°rio: ${userMessage}\nChatbot (responda breve e naturalmente):`;

        const response = await axios.post(
            AI_CONFIG.API_URL,
            {
                model: AI_CONFIG.MODEL,
                messages: [{ role: "user", content: prompt }],
                max_tokens: AI_CONFIG.MAX_TOKENS,
                temperature: 0.7,
            },
            {
                headers: {
                    "Authorization": `Bearer ${AI_CONFIG.API_KEY}`,
                    "Content-Type": "application/json"
                }
            }
        );

        return response.data.choices[0].message.content.trim();
    } catch (error) {
        console.error("Erro na IA (fallback para resposta padr√£o):", error.message);
        return null; // Retorna null para usar respostas pr√©-definidas
    }

}

async function sendMenu(msg, name) {
    const chat = await msg.getChat();
    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        `Ol√° ${name.split(" ")[0]}! Sou o chatbot do Rodrigo Moreira. Escolha uma op√ß√£o:\n\n` +
        '1 - Como funciono?\n2 - Por que sou simples?\n3 - Benef√≠cios\n4 - Como melhorar\n5 - Palavr√£o'
    );
}

// Handler principal
client.on('message', async msg => {
    if (!msg.from.endsWith('@c.us')) return;

    const chat = await msg.getChat();
    const contact = await msg.getContact();
    const name = contact.pushname;
    const userState = userStates[msg.from];
    const userMessage = msg.body.toLowerCase();

    // 1. Primeiro verifica estados pendentes
    if (userState?.awaiting === 'sim_instrucoes') {
        if (body === 'sim' || body === 's') {
            await chat.sendStateTyping();
            await delay(2500);
            await client.sendMessage(
                msg.from,
                'Instala√ß√£o:\n1. Instale Node.js e VSCode\n2. Clone o reposit√≥rio: https://github.com/rodrigovmoreira/Chatbot\n3. Execute `npm install`\n4. Inicie com `npm start`'
            );
            delete userStates[msg.from];
            return;
        } else if (body === 'voltar') {
            delete userStates[msg.from];
            await sendMenu(msg, name);
            return;
        }
    }

    if (userState?.awaiting === 'ia_instrucoes' && body === 'ia') {
        await chat.sendStateTyping();
        await delay(2500);
        await client.sendMessage(msg.from, 'Ferramentas de IA que me ajudaram:\n\n- DeepSeek: https://chat.deepseek.com\n- GitHub Copilot: https://github.com/features/copilot');
        delete userStates[msg.from];
        return;
    }

    if (userState?.awaiting === 'mongo_sera' && body.includes('mong')) {
        await chat.sendStateTyping();
        await delay(2500);
        await client.sendMessage(msg.from, 'Sim! MongoDB √© ideal para:\n- Hist√≥rico de conversas\n- Dados n√£o estruturados\n- Escalabilidade\n\nVeja mais: https://www.mongodb.com/');
        delete userStates[msg.from];
        return;
    }

    if (userState?.awaiting === 'Palavr√£o!') {
        await chat.sendStateTyping();
        await delay(2500);
        await client.sendMessage(msg.from, `Anotado seu "${msg.body}" üëÄ\nVoltando ao menu...`);
        delete userStates[msg.from];
        await sendMenu(msg, name);
        return;
    }

    // 2. Depois verifica comandos de menu (regex corrigida)
    if (userMessage.match(/^(menu|ola|oi|voltar)$/i)) {
        await sendMenu(msg, name);
        return;
    } else if (userMessage.match(/^(menu|ola|oi|voltar|[1-5])$/i)) {
        await client.sendMessage(msg.from, "Digite *menu* para op√ß√µes ou fa√ßa uma pergunta mais detalhada!");
    }

    // 2.1. Se n√£o for um comando, use IA para resposta flu√≠da
    if (msg.body.split(' ').length > 3 || msg.body.includes('?')) {
        await chat.sendStateTyping();

        // 2.1 Tenta gerar resposta via IA (com fallback)
        const aiResponse = await generateAIResponse(msg.body, "Voc√™ √© um chatbot √∫til chamado MoreiraBot.");

        if (aiResponse) {
            await client.sendMessage(msg.from, aiResponse);
        } else {
            await client.sendMessage(msg.from, "ü§ñ Pode reformular? Estou aprendendo ainda!");
        }
        return;
    }

    // 3. Por √∫ltimo, op√ß√µes num√©ricas
    switch (msg.body) {
        case '1':
            await handleOption1(msg);
            break;
        case '2':
            await handleOption2(msg);
            break;
        case '3':
            await handleOption3(msg);
            break;
        case '4':
            await handleOption4(msg);
            break;
        case '5':
            await handleOption5(msg);
            break;
        default:
            await client.sendMessage(msg.from, 'N√£o entendi. Digite *menu* para op√ß√µes.');
    }
});

// Fun√ß√µes para lidar com cada op√ß√£o
// Cada fun√ß√£o pode ser modularizada para facilitar a manuten√ß√£o
async function handleOption1(msg) {
    const chat = await msg.getChat();
    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Sou um assistente virtual para responder perguntas sobre nossos servi√ßos.\n' +
        'Estou em constante evolu√ß√£o!'
    );

    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Quer ver meu c√≥digo? Digite *sim* para instru√ß√µes ou *voltar* ao menu.\n\n' +
        'Reposit√≥rio: https://github.com/rodrigovmoreira/Chatbot'
    );

    // Define estado para aguardar resposta
    userStates[msg.from] = { awaiting: 'sim_instrucoes' };
}

async function handleOption2(msg) {
    const chat = await msg.getChat();
    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Fui feito em Javascript, com a biblioteca whatsapp-web.js.\n\n' +
        'Sou um assistente virtual que est√° dando os primeiros passos!'
    );

    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Fui feito com a ajuda de IA, e em breve acho que at√© comecarei a me comunicar melhor usando alguma biblioteca assim.\n\n' +
        'O DeepSeek e o Github Copilot me ajudaram a criar esse bot! Digite *IA* que te mando o link.'
    );

    // Define estado para aguardar resposta
    userStates[msg.from] = { awaiting: 'ia_instrucoes' };
}

async function handleOption3(msg) {
    const chat = await msg.getChat();
    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Sim, tenho benef√≠cios! Voc√™ pode me ajudar a melhorar minhas respostas e tornar minha experi√™ncia mais √∫til para voc√™.\n\n' +
        'Al√©m disso, estou sempre aprendendo e melhorando!'
    );

    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Quer ver meu c√≥digo? Digite *sim* para instru√ß√µes ou *voltar* ao menu.\n\n' +
        'Reposit√≥rio: https://github.com/rodrigovmoreira/Chatbot'
    );

    // Define estado para aguardar resposta
    userStates[msg.from] = { awaiting: 'sim_instrucoes' };
}

async function handleOption4(msg) {
    const chat = await msg.getChat();
    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Um mudan√ßa significativa ser√° a introdu√ß√£o de um banco de dados, que pode guardar o hist√≥rico do chat e retormar de outros pontos.\n' +
        'O MongoDb √© uma op√ß√£o para essa melhoria!'
    );

    // Define estado para aguardar resposta
    userStates[msg.from] = { awaiting: 'mongo_sera' };
}

async function handleOption5(msg) {
    const chat = await msg.getChat();
    await delay(2500);
    await chat.sendStateTyping();
    await delay(2500);
    await client.sendMessage(
        msg.from,
        'Digite seu Palavr√£o (ou *voltar* para menu):'
    );

    // Define estado para capturar Palavr√£o
    userStates[msg.from] = { awaiting: 'Palavr√£o!' };
}
